package com.motycka.edu.menu

import com.motycka.edu.error.UnauthorizedException
import com.motycka.edu.security.IdentityDTO
import com.motycka.edu.user.UserRole
import io.github.oshai.kotlinlogging.KotlinLogging

private val logger = KotlinLogging.logger {}

class MenuService(
    private val menuRepository: MenuRepository
) {

    suspend fun getMenuItems(filter: String? = null): Set<MenuItemResponse> {
        logger.info { "Getting all menu items${filter?.let { " with filter: $it" } ?: ""}" }
        return menuRepository.selectMenuItems(
            filter = filter,
            ids = null
        ).toResponse().toSet()
    }

    suspend fun getMenuItem(id: MenuItemId): MenuItemResponse? {
        logger.info { "Getting menu item with id: $id" }
        return menuRepository.selectMenuItemById(id)?.toResponse()
    }

    suspend fun createMenuItem(identity: IdentityDTO, request: MenuItemRequest): MenuItemResponse {
        logger.info { "Creating menu item: ${request.name} by user: ${identity.userId}" }
        return when (identity.role) {
            UserRole.STAFF -> menuRepository.insertMenuItem(request.toDTO()).toResponse()
            UserRole.CUSTOMER -> throw UnauthorizedException("Only admin users can create menu items")
        }
    }

    suspend fun updateMenuItem(identity: IdentityDTO, id: MenuItemId, request: MenuItemRequest): MenuItemResponse? {
        logger.info { "Updating menu item with id: $id by user: ${identity.userId}" }
        return when (identity.role) {
            UserRole.STAFF -> menuRepository.selectMenuItemById(id)
            UserRole.CUSTOMER -> throw UnauthorizedException("Only admin users can create menu items")
        }?.let { existingItem ->
            val updatedItem = existingItem.copy(
                name = request.name,
                description = request.description,
                price = request.price
            )
            menuRepository.updateMenuItem(updatedItem)
            updatedItem
        }?.toResponse()
    }

    suspend fun deleteMenuItem(identity: IdentityDTO, id: MenuItemId): Boolean {
        logger.info { "Deleting menu item with id: $id by user: ${identity.userId}" }
        return when (identity.role) {
            UserRole.STAFF -> menuRepository.deleteMenuItem(id) == 1
            UserRole.CUSTOMER -> throw UnauthorizedException("Only admin users can create menu items")
        }
    }

    fun Collection<MenuItemDTO>.toResponse(): Collection<MenuItemResponse> {
        return this.map { it.toResponse() }.toSet()
    }

    fun MenuItemRequest.toDTO(): MenuItemDTO {
        return MenuItemDTO(
            id = null, // ID will be generated by the repository
            name = name,
            description = description,
            price = price,
            isDeleted = false // New items are not deleted
        )
    }
    fun MenuItemDTO.toResponse(): MenuItemResponse {
        return MenuItemResponse(
            id = requireNotNull(id) { "MenuItemDTO id cannot be null" },
            name = name,
            description = description,
            price = price
        )
    }
}
